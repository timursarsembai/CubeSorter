<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/cubesorter/SorterActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/cubesorter/SorterActivity.kt" />
              <option name="originalContent" value="package com.timursarsembayev.cubesorter&#10;&#10;import android.app.Activity&#10;import android.app.AlertDialog&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.text.InputFilter&#10;import android.text.InputType&#10;import android.view.ContextThemeWrapper&#10;import android.view.LayoutInflater&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import java.util.Locale&#10;&#10;class SorterActivity : Activity() {&#10;&#10;    private lateinit var textLevel: TextView&#10;    private lateinit var textTimer: TextView&#10;    private lateinit var textMoves: TextView&#10;    private lateinit var sorterGameView: SorterGameView&#10;&#10;    private var startTime: Long = 0&#10;    private var isTimerRunning = false&#10;&#10;    // Диалог завершения уровня&#10;    private var levelDialog: AlertDialog? = null&#10;&#10;    // Хранение прогресса&#10;    private val prefs by lazy { getSharedPreferences(&quot;progress&quot;, MODE_PRIVATE) }&#10;&#10;    // Админ режим&#10;    private var isAdminMode = false&#10;    private var isLevelPressing = false&#10;    private val longPressThresholdMs = 10_000L&#10;    private val levelPressHandler = Handler(Looper.getMainLooper())&#10;    private var levelLongPressRunnable: Runnable? = null&#10;&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private val timerRunnable = object : Runnable {&#10;        override fun run() {&#10;            if (isTimerRunning) {&#10;                updateTimer()&#10;                handler.postDelayed(this, 100)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_sorter)&#10;&#10;        initializeViews()&#10;        setupGameCallbacks()&#10;        setupAdminGesture()&#10;        startNewGame()&#10;        restoreProgressIfAny()&#10;    }&#10;&#10;    private fun initializeViews() {&#10;        textLevel = findViewById(R.id.textLevel)&#10;        textTimer = findViewById(R.id.textTimer)&#10;        textMoves = findViewById(R.id.textMoves)&#10;        sorterGameView = findViewById(R.id.sorterGameView)&#10;    }&#10;&#10;    private fun setupGameCallbacks() {&#10;        sorterGameView.onMovesChanged = { moves -&gt;&#10;            textMoves.text = moves.toString()&#10;            if (moves == 1 &amp;&amp; !isTimerRunning) startTimer()&#10;        }&#10;&#10;        sorterGameView.onRoundChanged = { round, _ -&gt;&#10;            textLevel.text = round.toString()&#10;            resetTimer()&#10;            saveLevel(round)&#10;        }&#10;&#10;        sorterGameView.onRoundCompleted = { round, moves -&gt;&#10;            val elapsedMillis = if (startTime &gt; 0) System.currentTimeMillis() - startTime else 0L&#10;            pauseTimer()&#10;            showLevelCompletedDialog(round, moves, elapsedMillis)&#10;        }&#10;&#10;        sorterGameView.onAllCompleted = {&#10;            // Все уровни завершены&#10;            resetTimer()&#10;            saveLevel(SorterGameView.MAX_LEVEL) // сохраняем финальный уровень&#10;            startCongratulations()&#10;        }&#10;    }&#10;&#10;    // --- Рекорды ---&#10;    private fun bestTimeKey(level: Int) = &quot;best_time_$level&quot; // long (ms)&#10;    private fun bestMovesKey(level: Int) = &quot;best_moves_$level&quot; // int&#10;&#10;    private fun getBestTime(level: Int): Long = prefs.getLong(bestTimeKey(level), Long.MAX_VALUE)&#10;    private fun getBestMoves(level: Int): Int = prefs.getInt(bestMovesKey(level), Int.MAX_VALUE)&#10;    private fun saveBestTime(level: Int, v: Long) { prefs.edit().putLong(bestTimeKey(level), v).apply() }&#10;    private fun saveBestMoves(level: Int, v: Int) { prefs.edit().putInt(bestMovesKey(level), v).apply() }&#10;&#10;    private fun formatElapsed(ms: Long): String {&#10;        if (ms == Long.MAX_VALUE) return &quot;--:--.-&quot;&#10;        val minutes = (ms / 60000).toInt()&#10;        val seconds = ((ms % 60000) / 1000).toInt()&#10;        val tenths = ((ms % 1000) / 100).toInt()&#10;        return String.format(Locale.getDefault(), &quot;%02d:%02d.%d&quot;, minutes, seconds, tenths)&#10;    }&#10;&#10;    private fun showLevelCompletedDialog(round: Int, moves: Int, elapsedMillis: Long) {&#10;        levelDialog?.dismiss()&#10;        val inflaterContext = ContextThemeWrapper(this, R.style.LevelCompleteDialogTheme)&#10;        val view = LayoutInflater.from(inflaterContext).inflate(R.layout.dialog_level_completed, null, false)&#10;        val title = view.findViewById&lt;TextView&gt;(R.id.textTitle)&#10;        val message = view.findViewById&lt;TextView&gt;(R.id.textMessage)&#10;        val statTime = view.findViewById&lt;TextView&gt;(R.id.textStatTime)&#10;        val statMoves = view.findViewById&lt;TextView&gt;(R.id.textStatMoves)&#10;        val bestTimeView = view.findViewById&lt;TextView&gt;(R.id.textBestTime)&#10;        val bestMovesView = view.findViewById&lt;TextView&gt;(R.id.textBestMoves)&#10;        val btnRepeat = view.findViewById&lt;ImageButton&gt;(R.id.buttonRepeat)&#10;        val btnNext = view.findViewById&lt;ImageButton&gt;(R.id.buttonNext)&#10;&#10;        val prevBestTime = getBestTime(round)&#10;        val prevBestMoves = getBestMoves(round)&#10;&#10;        var newTimeRecord = false&#10;        var newMovesRecord = false&#10;&#10;        if (elapsedMillis &lt; prevBestTime) {&#10;            saveBestTime(round, elapsedMillis)&#10;            newTimeRecord = true&#10;        }&#10;        if (moves &lt; prevBestMoves) {&#10;            saveBestMoves(round, moves)&#10;            newMovesRecord = true&#10;        }&#10;&#10;        val currentBestTime = getBestTime(round)&#10;        val currentBestMoves = getBestMoves(round)&#10;&#10;        // Основной заголовок неизменен, сообщение адаптируется&#10;        message.text = when {&#10;            newTimeRecord &amp;&amp; newMovesRecord -&gt; getString(R.string.record_both_congrats)&#10;            newTimeRecord -&gt; getString(R.string.record_time_congrats)&#10;            newMovesRecord -&gt; getString(R.string.record_moves_congrats)&#10;            else -&gt; getString(R.string.level_completed_message)&#10;        }&#10;&#10;        statTime.text = formatElapsed(elapsedMillis)&#10;        statMoves.text = moves.toString()&#10;&#10;        // Показываем строки Best только если есть сохранённый рекорд&#10;        if (currentBestTime != Long.MAX_VALUE) {&#10;            bestTimeView.text = &quot;Best: ${formatElapsed(currentBestTime)}&quot; // если новый рекорд — совпадёт с текущим&#10;            bestTimeView.visibility = android.view.View.VISIBLE&#10;            if (newTimeRecord) bestTimeView.setTextColor(Color.parseColor(&quot;#2E7D32&quot;))&#10;        }&#10;        if (currentBestMoves != Int.MAX_VALUE) {&#10;            bestMovesView.text = &quot;Best: $currentBestMoves&quot;&#10;            bestMovesView.visibility = android.view.View.VISIBLE&#10;            if (newMovesRecord) bestMovesView.setTextColor(Color.parseColor(&quot;#2E7D32&quot;))&#10;        }&#10;&#10;        val dialog = AlertDialog.Builder(inflaterContext)&#10;            .setView(view)&#10;            .setCancelable(false)&#10;            .create()&#10;        levelDialog = dialog&#10;&#10;        btnRepeat.setOnClickListener {&#10;            dialog.dismiss()&#10;            sorterGameView.jumpToLevel(sorterGameView.currentRound)&#10;        }&#10;&#10;        btnNext.setOnClickListener {&#10;            dialog.dismiss()&#10;            sorterGameView.nextRound()&#10;        }&#10;&#10;        dialog.show()&#10;    }&#10;&#10;    private fun restoreProgressIfAny() {&#10;        val saved = prefs.getInt(&quot;current_level&quot;, 1)&#10;        if (saved in 2..SorterGameView.MAX_LEVEL) {&#10;            sorterGameView.jumpToLevel(saved)&#10;        }&#10;    }&#10;&#10;    private fun saveLevel(lv: Int) {&#10;        prefs.edit().putInt(&quot;current_level&quot;, lv.coerceIn(1, SorterGameView.MAX_LEVEL)).apply()&#10;    }&#10;&#10;    private fun setupAdminGesture() {&#10;        // Клик по номеру уровня в админ-режиме -&gt; переход по номеру&#10;        textLevel.setOnClickListener {&#10;            if (isAdminMode) showLevelJumpDialog()&#10;        }&#10;&#10;        textLevel.setOnTouchListener { _, event -&gt;&#10;            if (isAdminMode) return@setOnTouchListener false&#10;            when (event.actionMasked) {&#10;                android.view.MotionEvent.ACTION_DOWN -&gt; {&#10;                    isLevelPressing = true&#10;                    levelLongPressRunnable = Runnable {&#10;                        if (isLevelPressing &amp;&amp; !isAdminMode) {&#10;                            showAdminCodeDialog()&#10;                        }&#10;                    }&#10;                    levelPressHandler.postDelayed(levelLongPressRunnable!!, longPressThresholdMs)&#10;                }&#10;                android.view.MotionEvent.ACTION_UP, android.view.MotionEvent.ACTION_CANCEL -&gt; {&#10;                    isLevelPressing = false&#10;                    levelLongPressRunnable?.let { levelPressHandler.removeCallbacks(it) }&#10;                }&#10;            }&#10;            true&#10;        }&#10;    }&#10;&#10;    private fun showAdminCodeDialog() {&#10;        val input = EditText(this).apply {&#10;            inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD&#10;            hint = &quot;Enter admin code&quot;&#10;        }&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Administrator Access&quot;)&#10;            .setMessage(&quot;Hold 10s detected. Enter code:&quot;)&#10;            .setView(input)&#10;            .setPositiveButton(&quot;OK&quot;) { d, _ -&gt;&#10;                val code = input.text.toString().trim()&#10;                if (code == &quot;ROOT&quot;) {&#10;                    isAdminMode = true&#10;                    Toast.makeText(this, &quot;Admin mode enabled&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    Toast.makeText(this, &quot;Wrong code&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                d.dismiss()&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;) { d, _ -&gt; d.dismiss() }&#10;            .setCancelable(false)&#10;            .show()&#10;    }&#10;&#10;    private fun showLevelJumpDialog() {&#10;        val input = EditText(this).apply {&#10;            inputType = InputType.TYPE_CLASS_NUMBER&#10;            filters = arrayOf(InputFilter.LengthFilter(2))&#10;            hint = &quot;Level (1-40)&quot;&#10;        }&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Jump to Level&quot;)&#10;            .setMessage(&quot;Enter level number 1..40&quot;)&#10;            .setView(input)&#10;            .setPositiveButton(&quot;Go&quot;) { d, _ -&gt;&#10;                val text = input.text.toString().trim()&#10;                val num = text.toIntOrNull()&#10;                if (num != null &amp;&amp; num in 1..SorterGameView.MAX_LEVEL) {&#10;                    sorterGameView.jumpToLevel(num)&#10;                    Toast.makeText(this, &quot;Jumped to level $num&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    Toast.makeText(this, &quot;Invalid level&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                d.dismiss()&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;) { d, _ -&gt; d.dismiss() }&#10;            .show()&#10;    }&#10;&#10;    private fun startCongratulations() {&#10;        startActivity(Intent(this, CongratulationsActivity::class.java))&#10;    }&#10;&#10;    private fun startNewGame() {&#10;        textLevel.text = &quot;1&quot;&#10;        textMoves.text = &quot;0&quot;&#10;        textTimer.text = getString(R.string.time_zero_tenth)&#10;        resetTimer()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        startTime = System.currentTimeMillis()&#10;        isTimerRunning = true&#10;        handler.post(timerRunnable)&#10;    }&#10;&#10;    private fun pauseTimer() {&#10;        isTimerRunning = false&#10;        handler.removeCallbacks(timerRunnable)&#10;    }&#10;&#10;    private fun resetTimer() {&#10;        isTimerRunning = false&#10;        handler.removeCallbacks(timerRunnable)&#10;        startTime = 0&#10;        textTimer.text = getString(R.string.time_zero_tenth)&#10;    }&#10;&#10;    private fun updateTimer() {&#10;        val currentTime = System.currentTimeMillis()&#10;        val elapsedTime = currentTime - startTime&#10;        val minutes = (elapsedTime / 60000).toInt()&#10;        val seconds = ((elapsedTime % 60000) / 1000).toInt()&#10;        val tenths = ((elapsedTime % 1000) / 100).toInt()&#10;&#10;        textTimer.text = String.format(Locale.getDefault(), &quot;%02d:%02d.%d&quot;, minutes, seconds, tenths)&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        resetTimer()&#10;        levelDialog?.dismiss()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.timursarsembayev.cubesorter&#10;&#10;import android.app.Activity&#10;import android.app.AlertDialog&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.text.InputFilter&#10;import android.text.InputType&#10;import android.view.ContextThemeWrapper&#10;import android.view.LayoutInflater&#10;import android.widget.EditText&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import android.graphics.Color&#10;import java.util.Locale&#10;&#10;class SorterActivity : Activity() {&#10;&#10;    private lateinit var textLevel: TextView&#10;    private lateinit var textTimer: TextView&#10;    private lateinit var textMoves: TextView&#10;    private lateinit var sorterGameView: SorterGameView&#10;&#10;    private var startTime: Long = 0&#10;    private var isTimerRunning = false&#10;&#10;    // Диалог завершения уровня&#10;    private var levelDialog: AlertDialog? = null&#10;&#10;    // Хранение прогресса&#10;    private val prefs by lazy { getSharedPreferences(&quot;progress&quot;, MODE_PRIVATE) }&#10;&#10;    // Админ режим&#10;    private var isAdminMode = false&#10;    private var isLevelPressing = false&#10;    private val longPressThresholdMs = 10_000L&#10;    private val levelPressHandler = Handler(Looper.getMainLooper())&#10;    private var levelLongPressRunnable: Runnable? = null&#10;&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private val timerRunnable = object : Runnable {&#10;        override fun run() {&#10;            if (isTimerRunning) {&#10;                updateTimer()&#10;                handler.postDelayed(this, 100)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_sorter)&#10;&#10;        initializeViews()&#10;        setupGameCallbacks()&#10;        setupAdminGesture()&#10;        startNewGame()&#10;        restoreProgressIfAny()&#10;    }&#10;&#10;    private fun initializeViews() {&#10;        textLevel = findViewById(R.id.textLevel)&#10;        textTimer = findViewById(R.id.textTimer)&#10;        textMoves = findViewById(R.id.textMoves)&#10;        sorterGameView = findViewById(R.id.sorterGameView)&#10;    }&#10;&#10;    private fun setupGameCallbacks() {&#10;        sorterGameView.onMovesChanged = { moves -&gt;&#10;            textMoves.text = moves.toString()&#10;            if (moves == 1 &amp;&amp; !isTimerRunning) startTimer()&#10;        }&#10;&#10;        sorterGameView.onRoundChanged = { round, _ -&gt;&#10;            textLevel.text = round.toString()&#10;            resetTimer()&#10;            saveLevel(round)&#10;        }&#10;&#10;        sorterGameView.onRoundCompleted = { round, moves -&gt;&#10;            val elapsedMillis = if (startTime &gt; 0) System.currentTimeMillis() - startTime else 0L&#10;            pauseTimer()&#10;            showLevelCompletedDialog(round, moves, elapsedMillis)&#10;        }&#10;&#10;        sorterGameView.onAllCompleted = {&#10;            // Все уровни завершены&#10;            resetTimer()&#10;            saveLevel(SorterGameView.MAX_LEVEL) // сохраняем финальный уровень&#10;            startCongratulations()&#10;        }&#10;    }&#10;&#10;    // --- Рекорды ---&#10;    private fun bestTimeKey(level: Int) = &quot;best_time_$level&quot; // long (ms)&#10;    private fun bestMovesKey(level: Int) = &quot;best_moves_$level&quot; // int&#10;&#10;    private fun getBestTime(level: Int): Long = prefs.getLong(bestTimeKey(level), Long.MAX_VALUE)&#10;    private fun getBestMoves(level: Int): Int = prefs.getInt(bestMovesKey(level), Int.MAX_VALUE)&#10;    private fun saveBestTime(level: Int, v: Long) { prefs.edit().putLong(bestTimeKey(level), v).apply() }&#10;    private fun saveBestMoves(level: Int, v: Int) { prefs.edit().putInt(bestMovesKey(level), v).apply() }&#10;&#10;    private fun formatElapsed(ms: Long): String {&#10;        if (ms == Long.MAX_VALUE) return &quot;--:--.-&quot;&#10;        val minutes = (ms / 60000).toInt()&#10;        val seconds = ((ms % 60000) / 1000).toInt()&#10;        val tenths = ((ms % 1000) / 100).toInt()&#10;        return String.format(Locale.getDefault(), &quot;%02d:%02d.%d&quot;, minutes, seconds, tenths)&#10;    }&#10;&#10;    private fun showLevelCompletedDialog(round: Int, moves: Int, elapsedMillis: Long) {&#10;        levelDialog?.dismiss()&#10;        val inflaterContext = ContextThemeWrapper(this, R.style.LevelCompleteDialogTheme)&#10;        val view = LayoutInflater.from(inflaterContext).inflate(R.layout.dialog_level_completed, null, false)&#10;        val title = view.findViewById&lt;TextView&gt;(R.id.textTitle)&#10;        val message = view.findViewById&lt;TextView&gt;(R.id.textMessage)&#10;        val statTime = view.findViewById&lt;TextView&gt;(R.id.textStatTime)&#10;        val statMoves = view.findViewById&lt;TextView&gt;(R.id.textStatMoves)&#10;        val bestTimeView = view.findViewById&lt;TextView&gt;(R.id.textBestTime)&#10;        val bestMovesView = view.findViewById&lt;TextView&gt;(R.id.textBestMoves)&#10;        val btnRepeat = view.findViewById&lt;ImageButton&gt;(R.id.buttonRepeat)&#10;        val btnNext = view.findViewById&lt;ImageButton&gt;(R.id.buttonNext)&#10;&#10;        val prevBestTime = getBestTime(round)&#10;        val prevBestMoves = getBestMoves(round)&#10;&#10;        var newTimeRecord = false&#10;        var newMovesRecord = false&#10;&#10;        if (elapsedMillis &lt; prevBestTime) {&#10;            saveBestTime(round, elapsedMillis)&#10;            newTimeRecord = true&#10;        }&#10;        if (moves &lt; prevBestMoves) {&#10;            saveBestMoves(round, moves)&#10;            newMovesRecord = true&#10;        }&#10;&#10;        val currentBestTime = getBestTime(round)&#10;        val currentBestMoves = getBestMoves(round)&#10;&#10;        // Основной заголовок неизменен, сообщение адаптируется&#10;        message.text = when {&#10;            newTimeRecord &amp;&amp; newMovesRecord -&gt; getString(R.string.record_both_congrats)&#10;            newTimeRecord -&gt; getString(R.string.record_time_congrats)&#10;            newMovesRecord -&gt; getString(R.string.record_moves_congrats)&#10;            else -&gt; getString(R.string.level_completed_message)&#10;        }&#10;&#10;        statTime.text = formatElapsed(elapsedMillis)&#10;        statMoves.text = moves.toString()&#10;&#10;        // Показываем строки Best только если есть сохранённый рекорд&#10;        if (currentBestTime != Long.MAX_VALUE) {&#10;            bestTimeView.text = &quot;Best: ${formatElapsed(currentBestTime)}&quot; // если новый рекорд — совпадёт с текущим&#10;            bestTimeView.visibility = android.view.View.VISIBLE&#10;            if (newTimeRecord) bestTimeView.setTextColor(Color.parseColor(&quot;#2E7D32&quot;))&#10;        }&#10;        if (currentBestMoves != Int.MAX_VALUE) {&#10;            bestMovesView.text = &quot;Best: $currentBestMoves&quot;&#10;            bestMovesView.visibility = android.view.View.VISIBLE&#10;            if (newMovesRecord) bestMovesView.setTextColor(Color.parseColor(&quot;#2E7D32&quot;))&#10;        }&#10;&#10;        val dialog = AlertDialog.Builder(inflaterContext)&#10;            .setView(view)&#10;            .setCancelable(false)&#10;            .create()&#10;        levelDialog = dialog&#10;&#10;        btnRepeat.setOnClickListener {&#10;            dialog.dismiss()&#10;            sorterGameView.jumpToLevel(sorterGameView.currentRound)&#10;        }&#10;&#10;        btnNext.setOnClickListener {&#10;            dialog.dismiss()&#10;            sorterGameView.nextRound()&#10;        }&#10;&#10;        dialog.show()&#10;    }&#10;&#10;    private fun restoreProgressIfAny() {&#10;        val saved = prefs.getInt(&quot;current_level&quot;, 1)&#10;        if (saved in 2..SorterGameView.MAX_LEVEL) {&#10;            sorterGameView.jumpToLevel(saved)&#10;        }&#10;    }&#10;&#10;    private fun saveLevel(lv: Int) {&#10;        prefs.edit().putInt(&quot;current_level&quot;, lv.coerceIn(1, SorterGameView.MAX_LEVEL)).apply()&#10;    }&#10;&#10;    private fun setupAdminGesture() {&#10;        // Клик по номеру уровня в админ-режиме -&gt; переход по номеру&#10;        textLevel.setOnClickListener {&#10;            if (isAdminMode) showLevelJumpDialog()&#10;        }&#10;&#10;        textLevel.setOnTouchListener { _, event -&gt;&#10;            if (isAdminMode) return@setOnTouchListener false&#10;            when (event.actionMasked) {&#10;                android.view.MotionEvent.ACTION_DOWN -&gt; {&#10;                    isLevelPressing = true&#10;                    levelLongPressRunnable = Runnable {&#10;                        if (isLevelPressing &amp;&amp; !isAdminMode) {&#10;                            showAdminCodeDialog()&#10;                        }&#10;                    }&#10;                    levelPressHandler.postDelayed(levelLongPressRunnable!!, longPressThresholdMs)&#10;                }&#10;                android.view.MotionEvent.ACTION_UP, android.view.MotionEvent.ACTION_CANCEL -&gt; {&#10;                    isLevelPressing = false&#10;                    levelLongPressRunnable?.let { levelPressHandler.removeCallbacks(it) }&#10;                }&#10;            }&#10;            true&#10;        }&#10;    }&#10;&#10;    private fun showAdminCodeDialog() {&#10;        val input = EditText(this).apply {&#10;            inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD&#10;            hint = &quot;Enter admin code&quot;&#10;        }&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Administrator Access&quot;)&#10;            .setMessage(&quot;Hold 10s detected. Enter code:&quot;)&#10;            .setView(input)&#10;            .setPositiveButton(&quot;OK&quot;) { d, _ -&gt;&#10;                val code = input.text.toString().trim()&#10;                if (code == &quot;ROOT&quot;) {&#10;                    isAdminMode = true&#10;                    Toast.makeText(this, &quot;Admin mode enabled&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    Toast.makeText(this, &quot;Wrong code&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                d.dismiss()&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;) { d, _ -&gt; d.dismiss() }&#10;            .setCancelable(false)&#10;            .show()&#10;    }&#10;&#10;    private fun showLevelJumpDialog() {&#10;        val input = EditText(this).apply {&#10;            inputType = InputType.TYPE_CLASS_NUMBER&#10;            filters = arrayOf(InputFilter.LengthFilter(2))&#10;            hint = &quot;Level (1-40)&quot;&#10;        }&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Jump to Level&quot;)&#10;            .setMessage(&quot;Enter level number 1..40&quot;)&#10;            .setView(input)&#10;            .setPositiveButton(&quot;Go&quot;) { d, _ -&gt;&#10;                val text = input.text.toString().trim()&#10;                val num = text.toIntOrNull()&#10;                if (num != null &amp;&amp; num in 1..SorterGameView.MAX_LEVEL) {&#10;                    sorterGameView.jumpToLevel(num)&#10;                    Toast.makeText(this, &quot;Jumped to level $num&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    Toast.makeText(this, &quot;Invalid level&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                d.dismiss()&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;) { d, _ -&gt; d.dismiss() }&#10;            .show()&#10;    }&#10;&#10;    private fun startCongratulations() {&#10;        startActivity(Intent(this, CongratulationsActivity::class.java))&#10;    }&#10;&#10;    private fun startNewGame() {&#10;        textLevel.text = &quot;1&quot;&#10;        textMoves.text = &quot;0&quot;&#10;        textTimer.text = getString(R.string.time_zero_tenth)&#10;        resetTimer()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        startTime = System.currentTimeMillis()&#10;        isTimerRunning = true&#10;        handler.post(timerRunnable)&#10;    }&#10;&#10;    private fun pauseTimer() {&#10;        isTimerRunning = false&#10;        handler.removeCallbacks(timerRunnable)&#10;    }&#10;&#10;    private fun resetTimer() {&#10;        isTimerRunning = false&#10;        handler.removeCallbacks(timerRunnable)&#10;        startTime = 0&#10;        textTimer.text = getString(R.string.time_zero_tenth)&#10;    }&#10;&#10;    private fun updateTimer() {&#10;        val currentTime = System.currentTimeMillis()&#10;        val elapsedTime = currentTime - startTime&#10;        val minutes = (elapsedTime / 60000).toInt()&#10;        val seconds = ((elapsedTime % 60000) / 1000).toInt()&#10;        val tenths = ((elapsedTime % 1000) / 100).toInt()&#10;&#10;        textTimer.text = String.format(Locale.getDefault(), &quot;%02d:%02d.%d&quot;, minutes, seconds, tenths)&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        resetTimer()&#10;        levelDialog?.dismiss()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_level_completed.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_level_completed.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@drawable/bg_level_dialog&quot;&#10;    android:gravity=&quot;center_horizontal&quot;&#10;    android:clipToPadding=&quot;false&quot;&#10;    android:padding=&quot;0dp&quot;&gt;&#10;&#10;    &lt;!-- Иконка / эмодзи успеха --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/iconEmoji&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&quot;&#10;        android:textSize=&quot;48sp&quot;&#10;        android:paddingTop=&quot;4dp&quot;&#10;        android:contentDescription=&quot;success&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;@string/level_completed_congrats&quot;&#10;        android:textColor=&quot;#0D47A1&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;22sp&quot;&#10;        android:paddingTop=&quot;4dp&quot;&#10;        android:paddingBottom=&quot;2dp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textMessage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;@string/level_completed_message&quot;&#10;        android:textColor=&quot;#455A64&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:paddingLeft=&quot;16dp&quot;&#10;        android:paddingRight=&quot;16dp&quot;&#10;        android:paddingBottom=&quot;12dp&quot;/&gt;&#10;&#10;    &lt;!-- Статистика --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:paddingBottom=&quot;12dp&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/chipTime&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:background=&quot;@drawable/stat_chip&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginRight=&quot;8dp&quot;&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Time: &quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#1565C0&quot;/&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textStatTime&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;00:00.0&quot;&#10;                android:textColor=&quot;#0D47A1&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/chipMoves&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:background=&quot;@drawable/stat_chip&quot;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Moves: &quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#1565C0&quot;/&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textStatMoves&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;0&quot;&#10;                android:textColor=&quot;#0D47A1&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Кнопки действий --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;4dp&quot;&#10;        android:layout_marginTop=&quot;4dp&quot;&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/buttonRepeat&quot;&#10;            android:layout_width=&quot;72dp&quot;&#10;            android:layout_height=&quot;72dp&quot;&#10;            android:background=&quot;@drawable/button_circle_primary&quot;&#10;            android:contentDescription=&quot;@string/content_desc_repeat_level&quot;&#10;            android:scaleType=&quot;centerInside&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:src=&quot;@drawable/ic_repeat&quot; /&gt;&#10;&#10;        &lt;Space&#10;            android:layout_width=&quot;24dp&quot;&#10;            android:layout_height=&quot;0dp&quot;/&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/buttonNext&quot;&#10;            android:layout_width=&quot;72dp&quot;&#10;            android:layout_height=&quot;72dp&quot;&#10;            android:background=&quot;@drawable/button_circle_primary&quot;&#10;            android:contentDescription=&quot;@string/content_desc_next_level&quot;&#10;            android:scaleType=&quot;centerInside&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:src=&quot;@drawable/ic_arrow_forward&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;@drawable/bg_level_dialog&quot;&#10;    android:gravity=&quot;center_horizontal&quot;&#10;    android:clipToPadding=&quot;false&quot;&#10;    android:padding=&quot;0dp&quot;&gt;&#10;&#10;    &lt;!-- Иконка / эмодзи успеха --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/iconEmoji&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;&quot;&#10;        android:textSize=&quot;48sp&quot;&#10;        android:paddingTop=&quot;4dp&quot;&#10;        android:contentDescription=&quot;success&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;@string/level_completed_congrats&quot;&#10;        android:textColor=&quot;#0D47A1&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:textSize=&quot;22sp&quot;&#10;        android:paddingTop=&quot;4dp&quot;&#10;        android:paddingBottom=&quot;2dp&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/textMessage&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;@string/level_completed_message&quot;&#10;        android:textColor=&quot;#455A64&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:paddingLeft=&quot;16dp&quot;&#10;        android:paddingRight=&quot;16dp&quot;&#10;        android:paddingBottom=&quot;12dp&quot;/&gt;&#10;&#10;    &lt;!-- Статистика --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:paddingBottom=&quot;12dp&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/chipTime&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:background=&quot;@drawable/stat_chip&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:layout_marginRight=&quot;8dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Time: &quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#1565C0&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textStatTime&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;00:00.0&quot;&#10;                    android:textColor=&quot;#0D47A1&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textBestTime&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Best: 00:00.0&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textColor=&quot;#1976D2&quot;&#10;                android:paddingTop=&quot;2dp&quot;&#10;                android:visibility=&quot;gone&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/chipMoves&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:background=&quot;@drawable/stat_chip&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Moves: &quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#1565C0&quot;/&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textStatMoves&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;0&quot;&#10;                    android:textColor=&quot;#0D47A1&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/textBestMoves&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Best: 0&quot;&#10;                android:textSize=&quot;12sp&quot;&#10;                android:textColor=&quot;#1976D2&quot;&#10;                android:paddingTop=&quot;2dp&quot;&#10;                android:visibility=&quot;gone&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Кнопки действий --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;4dp&quot;&#10;        android:layout_marginTop=&quot;4dp&quot;&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/buttonRepeat&quot;&#10;            android:layout_width=&quot;72dp&quot;&#10;            android:layout_height=&quot;72dp&quot;&#10;            android:background=&quot;@drawable/button_circle_primary&quot;&#10;            android:contentDescription=&quot;@string/content_desc_repeat_level&quot;&#10;            android:scaleType=&quot;centerInside&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:src=&quot;@drawable/ic_repeat&quot; /&gt;&#10;&#10;        &lt;Space&#10;            android:layout_width=&quot;24dp&quot;&#10;            android:layout_height=&quot;0dp&quot;/&gt;&#10;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/buttonNext&quot;&#10;            android:layout_width=&quot;72dp&quot;&#10;            android:layout_height=&quot;72dp&quot;&#10;            android:background=&quot;@drawable/button_circle_primary&quot;&#10;            android:contentDescription=&quot;@string/content_desc_next_level&quot;&#10;            android:scaleType=&quot;centerInside&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:src=&quot;@drawable/ic_arrow_forward&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;CubeSorter&lt;/string&gt;&#10;    &lt;string name=&quot;sorter_title_with_emoji&quot;&gt; Sorter&lt;/string&gt;&#10;    &lt;string name=&quot;back&quot;&gt;Back&lt;/string&gt;&#10;    &lt;string name=&quot;restart&quot;&gt;Restart&lt;/string&gt;&#10;    &lt;string name=&quot;level&quot;&gt;Level&lt;/string&gt;&#10;    &lt;string name=&quot;time&quot;&gt;Time&lt;/string&gt;&#10;    &lt;string name=&quot;time_zero_tenth&quot;&gt;00:00.0&lt;/string&gt;&#10;    &lt;string name=&quot;moves&quot;&gt;Moves&lt;/string&gt;&#10;    &lt;string name=&quot;sorter_speak_instruction_prefix&quot;&gt;Arrange blocks by digits:&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_0&quot;&gt;zero&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_1&quot;&gt;one&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_2&quot;&gt;two&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_3&quot;&gt;three&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_4&quot;&gt;four&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_5&quot;&gt;five&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_6&quot;&gt;six&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_7&quot;&gt;seven&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_8&quot;&gt;eight&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_9&quot;&gt;nine&lt;/string&gt;&#10;&#10;    &lt;!-- Level complete dialog (English only) --&gt;&#10;    &lt;string name=&quot;level_completed_congrats&quot;&gt;Level completed!&lt;/string&gt;&#10;    &lt;string name=&quot;level_completed_message&quot;&gt;Great! You can replay this level or go to the next one.&lt;/string&gt;&#10;    &lt;string name=&quot;action_repeat&quot;&gt;Replay&lt;/string&gt;&#10;    &lt;string name=&quot;action_next&quot;&gt;Next&lt;/string&gt;&#10;    &lt;string name=&quot;content_desc_repeat_level&quot;&gt;Replay level&lt;/string&gt;&#10;    &lt;string name=&quot;content_desc_next_level&quot;&gt;Next level&lt;/string&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;CubeSorter&lt;/string&gt;&#10;    &lt;string name=&quot;sorter_title_with_emoji&quot;&gt; Sorter&lt;/string&gt;&#10;    &lt;string name=&quot;back&quot;&gt;Back&lt;/string&gt;&#10;    &lt;string name=&quot;restart&quot;&gt;Restart&lt;/string&gt;&#10;    &lt;string name=&quot;level&quot;&gt;Level&lt;/string&gt;&#10;    &lt;string name=&quot;time&quot;&gt;Time&lt;/string&gt;&#10;    &lt;string name=&quot;time_zero_tenth&quot;&gt;00:00.0&lt;/string&gt;&#10;    &lt;string name=&quot;moves&quot;&gt;Moves&lt;/string&gt;&#10;    &lt;string name=&quot;sorter_speak_instruction_prefix&quot;&gt;Arrange blocks by digits:&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_0&quot;&gt;zero&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_1&quot;&gt;one&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_2&quot;&gt;two&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_3&quot;&gt;three&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_4&quot;&gt;four&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_5&quot;&gt;five&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_6&quot;&gt;six&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_7&quot;&gt;seven&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_8&quot;&gt;eight&lt;/string&gt;&#10;    &lt;string name=&quot;number_name_9&quot;&gt;nine&lt;/string&gt;&#10;&#10;    &lt;!-- Level complete dialog (English only) --&gt;&#10;    &lt;string name=&quot;level_completed_congrats&quot;&gt;Level completed!&lt;/string&gt;&#10;    &lt;string name=&quot;level_completed_message&quot;&gt;Great! You can replay this level or go to the next one.&lt;/string&gt;&#10;    &lt;string name=&quot;record_both_congrats&quot;&gt;Amazing! New records for time and moves!&lt;/string&gt;&#10;    &lt;string name=&quot;record_time_congrats&quot;&gt;New fastest time!&lt;/string&gt;&#10;    &lt;string name=&quot;record_moves_congrats&quot;&gt;New best moves!&lt;/string&gt;&#10;    &lt;string name=&quot;action_repeat&quot;&gt;Replay&lt;/string&gt;&#10;    &lt;string name=&quot;action_next&quot;&gt;Next&lt;/string&gt;&#10;    &lt;string name=&quot;content_desc_repeat_level&quot;&gt;Replay level&lt;/string&gt;&#10;    &lt;string name=&quot;content_desc_next_level&quot;&gt;Next level&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>