<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/cubesorter/SorterActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/timursarsembayev/cubesorter/SorterActivity.kt" />
              <option name="originalContent" value="package com.timursarsembayev.cubesorter&#10;&#10;import android.app.Activity&#10;import android.app.AlertDialog&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.text.InputFilter&#10;import android.text.InputType&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import java.util.Locale&#10;&#10;class SorterActivity : Activity() {&#10;&#10;    private lateinit var textLevel: TextView&#10;    private lateinit var textTimer: TextView&#10;    private lateinit var textMoves: TextView&#10;    private lateinit var sorterGameView: SorterGameView&#10;&#10;    private var startTime: Long = 0&#10;    private var isTimerRunning = false&#10;&#10;    // Админ режим&#10;    private var isAdminMode = false&#10;    private var isLevelPressing = false&#10;    private val longPressThresholdMs = 10_000L&#10;    private val levelPressHandler = Handler(Looper.getMainLooper())&#10;    private var levelLongPressRunnable: Runnable? = null&#10;&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private val timerRunnable = object : Runnable {&#10;        override fun run() {&#10;            if (isTimerRunning) {&#10;                updateTimer()&#10;                handler.postDelayed(this, 100)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_sorter)&#10;&#10;        initializeViews()&#10;        setupGameCallbacks()&#10;        setupAdminGesture()&#10;        startNewGame()&#10;    }&#10;&#10;    private fun initializeViews() {&#10;        textLevel = findViewById(R.id.textLevel)&#10;        textTimer = findViewById(R.id.textTimer)&#10;        textMoves = findViewById(R.id.textMoves)&#10;        sorterGameView = findViewById(R.id.sorterGameView)&#10;    }&#10;&#10;    private fun setupGameCallbacks() {&#10;        sorterGameView.onMovesChanged = { moves -&gt;&#10;            textMoves.text = moves.toString()&#10;            if (moves == 1 &amp;&amp; !isTimerRunning) startTimer()&#10;        }&#10;&#10;        sorterGameView.onRoundChanged = { round, _ -&gt;&#10;            textLevel.text = round.toString()&#10;            resetTimer()&#10;        }&#10;&#10;        sorterGameView.onRoundCompleted = { _, _ -&gt;&#10;            // Можно добавить локальную логику между уровнями&#10;        }&#10;&#10;        sorterGameView.onAllCompleted = {&#10;            // Завершены все 40 уровней&#10;            resetTimer()&#10;            startCongratulations()&#10;        }&#10;    }&#10;&#10;    private fun setupAdminGesture() {&#10;        // Клик по номеру уровня в админ-режиме -&gt; переход по номеру&#10;        textLevel.setOnClickListener {&#10;            if (isAdminMode) showLevelJumpDialog()&#10;        }&#10;&#10;        textLevel.setOnTouchListener { _, event -&gt;&#10;            // Если уже админ режим активен — не перехватываем, даём сработать OnClick&#10;            if (isAdminMode) return@setOnTouchListener false&#10;            when (event.actionMasked) {&#10;                android.view.MotionEvent.ACTION_DOWN -&gt; {&#10;                    isLevelPressing = true&#10;                    levelLongPressRunnable = Runnable {&#10;                        if (isLevelPressing &amp;&amp; !isAdminMode) {&#10;                            showAdminCodeDialog()&#10;                        }&#10;                    }&#10;                    levelPressHandler.postDelayed(levelLongPressRunnable!!, longPressThresholdMs)&#10;                }&#10;                android.view.MotionEvent.ACTION_UP, android.view.MotionEvent.ACTION_CANCEL -&gt; {&#10;                    isLevelPressing = false&#10;                    levelLongPressRunnable?.let { levelPressHandler.removeCallbacks(it) }&#10;                }&#10;            }&#10;            // Возвращаем true только пока НЕ админ режим (чтобы не вызывать клик раньше времени)&#10;            true&#10;        }&#10;    }&#10;&#10;    private fun showAdminCodeDialog() {&#10;        val input = EditText(this).apply {&#10;            inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD&#10;            hint = &quot;Enter admin code&quot;&#10;        }&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Administrator Access&quot;)&#10;            .setMessage(&quot;Hold 10s detected. Enter code:&quot;)&#10;            .setView(input)&#10;            .setPositiveButton(&quot;OK&quot;) { d, _ -&gt;&#10;                val code = input.text.toString().trim()&#10;                if (code == &quot;ROOT&quot;) {&#10;                    isAdminMode = true&#10;                    Toast.makeText(this, &quot;Admin mode enabled&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    Toast.makeText(this, &quot;Wrong code&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                d.dismiss()&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;) { d, _ -&gt; d.dismiss() }&#10;            .setCancelable(false)&#10;            .show()&#10;    }&#10;&#10;    private fun showLevelJumpDialog() {&#10;        val input = EditText(this).apply {&#10;            inputType = InputType.TYPE_CLASS_NUMBER&#10;            filters = arrayOf(InputFilter.LengthFilter(2))&#10;            hint = &quot;Level (1-40)&quot;&#10;        }&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Jump to Level&quot;)&#10;            .setMessage(&quot;Enter level number 1..40&quot;)&#10;            .setView(input)&#10;            .setPositiveButton(&quot;Go&quot;) { d, _ -&gt;&#10;                val text = input.text.toString().trim()&#10;                val num = text.toIntOrNull()&#10;                if (num != null &amp;&amp; num in 1..SorterGameView.MAX_LEVEL) {&#10;                    sorterGameView.jumpToLevel(num)&#10;                    Toast.makeText(this, &quot;Jumped to level $num&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    Toast.makeText(this, &quot;Invalid level&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                d.dismiss()&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;) { d, _ -&gt; d.dismiss() }&#10;            .show()&#10;    }&#10;&#10;    private fun startCongratulations() {&#10;        startActivity(Intent(this, CongratulationsActivity::class.java))&#10;    }&#10;&#10;    private fun startNewGame() {&#10;        textLevel.text = &quot;1&quot;&#10;        textMoves.text = &quot;0&quot;&#10;        textTimer.text = getString(R.string.time_zero_tenth)&#10;        resetTimer()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        startTime = System.currentTimeMillis()&#10;        isTimerRunning = true&#10;        handler.post(timerRunnable)&#10;    }&#10;&#10;    private fun resetTimer() {&#10;        isTimerRunning = false&#10;        handler.removeCallbacks(timerRunnable)&#10;        startTime = 0&#10;        textTimer.text = getString(R.string.time_zero_tenth)&#10;    }&#10;&#10;    private fun updateTimer() {&#10;        val currentTime = System.currentTimeMillis()&#10;        val elapsedTime = currentTime - startTime&#10;&#10;        val minutes = (elapsedTime / 60000).toInt()&#10;        val seconds = ((elapsedTime % 60000) / 1000).toInt()&#10;        val tenths = ((elapsedTime % 1000) / 100).toInt()&#10;&#10;        textTimer.text = String.format(Locale.getDefault(), &quot;%02d:%02d.%d&quot;, minutes, seconds, tenths)&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        resetTimer()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.timursarsembayev.cubesorter&#10;&#10;import android.app.Activity&#10;import android.app.AlertDialog&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.text.InputFilter&#10;import android.text.InputType&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import java.util.Locale&#10;&#10;class SorterActivity : Activity() {&#10;&#10;    private lateinit var textLevel: TextView&#10;    private lateinit var textTimer: TextView&#10;    private lateinit var textMoves: TextView&#10;    private lateinit var sorterGameView: SorterGameView&#10;&#10;    private var startTime: Long = 0&#10;    private var isTimerRunning = false&#10;&#10;    // Хранение прогресса&#10;    private val prefs by lazy { getSharedPreferences(&quot;progress&quot;, MODE_PRIVATE) }&#10;&#10;    // Админ режим&#10;    private var isAdminMode = false&#10;    private var isLevelPressing = false&#10;    private val longPressThresholdMs = 10_000L&#10;    private val levelPressHandler = Handler(Looper.getMainLooper())&#10;    private var levelLongPressRunnable: Runnable? = null&#10;&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private val timerRunnable = object : Runnable {&#10;        override fun run() {&#10;            if (isTimerRunning) {&#10;                updateTimer()&#10;                handler.postDelayed(this, 100)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_sorter)&#10;&#10;        initializeViews()&#10;        setupGameCallbacks()&#10;        setupAdminGesture()&#10;        startNewGame()&#10;        restoreProgressIfAny()&#10;    }&#10;&#10;    private fun initializeViews() {&#10;        textLevel = findViewById(R.id.textLevel)&#10;        textTimer = findViewById(R.id.textTimer)&#10;        textMoves = findViewById(R.id.textMoves)&#10;        sorterGameView = findViewById(R.id.sorterGameView)&#10;    }&#10;&#10;    private fun setupGameCallbacks() {&#10;        sorterGameView.onMovesChanged = { moves -&gt;&#10;            textMoves.text = moves.toString()&#10;            if (moves == 1 &amp;&amp; !isTimerRunning) startTimer()&#10;        }&#10;&#10;        sorterGameView.onRoundChanged = { round, _ -&gt;&#10;            textLevel.text = round.toString()&#10;            resetTimer()&#10;            saveLevel(round)&#10;        }&#10;&#10;        sorterGameView.onRoundCompleted = { _, _ -&gt;&#10;            // Между уровнями можно добавить логику&#10;        }&#10;&#10;        sorterGameView.onAllCompleted = {&#10;            // Все уровни завершены&#10;            resetTimer()&#10;            saveLevel(SorterGameView.MAX_LEVEL) // сохраняем финальный уровень&#10;            startCongratulations()&#10;        }&#10;    }&#10;&#10;    private fun restoreProgressIfAny() {&#10;        val saved = prefs.getInt(&quot;current_level&quot;, 1)&#10;        if (saved in 2..SorterGameView.MAX_LEVEL) {&#10;            sorterGameView.jumpToLevel(saved)&#10;        }&#10;    }&#10;&#10;    private fun saveLevel(lv: Int) {&#10;        prefs.edit().putInt(&quot;current_level&quot;, lv.coerceIn(1, SorterGameView.MAX_LEVEL)).apply()&#10;    }&#10;&#10;    private fun setupAdminGesture() {&#10;        // Клик по номеру уровня в админ-режиме -&gt; переход по номеру&#10;        textLevel.setOnClickListener {&#10;            if (isAdminMode) showLevelJumpDialog()&#10;        }&#10;&#10;        textLevel.setOnTouchListener { _, event -&gt;&#10;            if (isAdminMode) return@setOnTouchListener false&#10;            when (event.actionMasked) {&#10;                android.view.MotionEvent.ACTION_DOWN -&gt; {&#10;                    isLevelPressing = true&#10;                    levelLongPressRunnable = Runnable {&#10;                        if (isLevelPressing &amp;&amp; !isAdminMode) {&#10;                            showAdminCodeDialog()&#10;                        }&#10;                    }&#10;                    levelPressHandler.postDelayed(levelLongPressRunnable!!, longPressThresholdMs)&#10;                }&#10;                android.view.MotionEvent.ACTION_UP, android.view.MotionEvent.ACTION_CANCEL -&gt; {&#10;                    isLevelPressing = false&#10;                    levelLongPressRunnable?.let { levelPressHandler.removeCallbacks(it) }&#10;                }&#10;            }&#10;            true&#10;        }&#10;    }&#10;&#10;    private fun showAdminCodeDialog() {&#10;        val input = EditText(this).apply {&#10;            inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD&#10;            hint = &quot;Enter admin code&quot;&#10;        }&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Administrator Access&quot;)&#10;            .setMessage(&quot;Hold 10s detected. Enter code:&quot;)&#10;            .setView(input)&#10;            .setPositiveButton(&quot;OK&quot;) { d, _ -&gt;&#10;                val code = input.text.toString().trim()&#10;                if (code == &quot;ROOT&quot;) {&#10;                    isAdminMode = true&#10;                    Toast.makeText(this, &quot;Admin mode enabled&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    Toast.makeText(this, &quot;Wrong code&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                d.dismiss()&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;) { d, _ -&gt; d.dismiss() }&#10;            .setCancelable(false)&#10;            .show()&#10;    }&#10;&#10;    private fun showLevelJumpDialog() {&#10;        val input = EditText(this).apply {&#10;            inputType = InputType.TYPE_CLASS_NUMBER&#10;            filters = arrayOf(InputFilter.LengthFilter(2))&#10;            hint = &quot;Level (1-40)&quot;&#10;        }&#10;        AlertDialog.Builder(this)&#10;            .setTitle(&quot;Jump to Level&quot;)&#10;            .setMessage(&quot;Enter level number 1..40&quot;)&#10;            .setView(input)&#10;            .setPositiveButton(&quot;Go&quot;) { d, _ -&gt;&#10;                val text = input.text.toString().trim()&#10;                val num = text.toIntOrNull()&#10;                if (num != null &amp;&amp; num in 1..SorterGameView.MAX_LEVEL) {&#10;                    sorterGameView.jumpToLevel(num)&#10;                    Toast.makeText(this, &quot;Jumped to level $num&quot;, Toast.LENGTH_SHORT).show()&#10;                } else {&#10;                    Toast.makeText(this, &quot;Invalid level&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                d.dismiss()&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;) { d, _ -&gt; d.dismiss() }&#10;            .show()&#10;    }&#10;&#10;    private fun startCongratulations() {&#10;        startActivity(Intent(this, CongratulationsActivity::class.java))&#10;    }&#10;&#10;    private fun startNewGame() {&#10;        textLevel.text = &quot;1&quot;&#10;        textMoves.text = &quot;0&quot;&#10;        textTimer.text = getString(R.string.time_zero_tenth)&#10;        resetTimer()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        startTime = System.currentTimeMillis()&#10;        isTimerRunning = true&#10;        handler.post(timerRunnable)&#10;    }&#10;&#10;    private fun resetTimer() {&#10;        isTimerRunning = false&#10;        handler.removeCallbacks(timerRunnable)&#10;        startTime = 0&#10;        textTimer.text = getString(R.string.time_zero_tenth)&#10;    }&#10;&#10;    private fun updateTimer() {&#10;        val currentTime = System.currentTimeMillis()&#10;        val elapsedTime = currentTime - startTime&#10;        val minutes = (elapsedTime / 60000).toInt()&#10;        val seconds = ((elapsedTime % 60000) / 1000).toInt()&#10;        val tenths = ((elapsedTime % 1000) / 100).toInt()&#10;        textTimer.text = String.format(Locale.getDefault(), &quot;%02d:%02d.%d&quot;, minutes, seconds, tenths)&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        resetTimer()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>